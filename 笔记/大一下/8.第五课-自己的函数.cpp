//头文件里就包含着很多个函数
//来定义属于自己的函数吧！

//类型标识符：函数的类型
//形参变量：函数里的参数(形式)。实参：函数外面的参数(实际)
//形参：全称为“形式参数”是在定义函数名和函数体的时候使用的参数，目的是用来接收调用该函数时传递的参数。

// 形参的作用是实现主调函数与被调函数之间的联系，通常将函数所处理的数据，影响函数功能的因素或者函数处理的结果作为形参。

// 实参：全称为"实际参数"是在调用时传递给函数的参数，即传递给被调用函数的值。

// 实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传送给形参。 因此应预先用赋值，输入等办法使实参获得确定值。

类型标识符 函数名(类型 形参变量;)
{
    语句
}

//例子：定义一个叫Hello的函数
void Hello()
{
    printf("你好");
    return;//函数结束
}
//写在main函数前面
//Hello();运行一次就输出一次你好。

for(i=1;i<=100;i++)
{
    printf("第%d次",i);
    Hello();
}
//来100次你好吧哈哈哈哈哈嗝

//或者可以这样写
void Hello(int x)
{
    printf("第%d次你好",x);
    return;//函数结束
}
//然后在main函数里写
int i;
for(i=1;i<=100;i++)
{
    Hello(i);
}

//递归函数：自己调用自己
//嵌套函数：一个函数调用另一个函数

#include <stdio.h>
void print(long n)
{
	if(n==0) return;
	else{
		print(n/10);//递归，先执行最后一次，输出5
		printf("% d",n%10);
		return;
	}
}
int main()
{
	print(5378);
	return 0;
}
//结果是：5 3 7 8

//变量的存储类型
存储类型:指数据在内存中的存储方法.
    有: auto自动型 
         static静态型
         register寄存器型 
         extern外部参照型
    缺省值(默认)为auto型 
         static静态型:函数中局部变量的值在函数调用结束后不消失而保留原值